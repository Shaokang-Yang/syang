{"title":"Behavior Segmentation for Smartphone Use","markdown":{"yaml":{"title":"Behavior Segmentation for Smartphone Use ","date":"12/09/2023","date-modified":"last-modified","date-format":"full","categories":["Paper1"],"image":"cluster1.png","tbl-colwidths":[5,30,125],"format":{"html":{"page-layout":"full"}}},"headingText":"Descriptive Statistics","containsRefs":false,"markdown":"\n\nWe cluster the smartphone use behaviors based on the three major metrics of smartphone use actions: Screen time, unlock frequency and message.\n\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nimport time;import pandas as pd;import numpy as np;import datetime\nfrom datetime import datetime;from datetime import timedelta;import sqlite3;import warnings\nimport matplotlib.pyplot as plt;import seaborn as sns;warnings.filterwarnings('ignore')\n\ndf=pd.read_csv(\"/Users/shaokangyang/Library/CloudStorage/OneDrive-Personal/Nethealth/Data/CNSA/combine/7/df7_3hr.csv\")\ndf1 = df\ndf1[['sleep_debt','sleep_duration','screen_time','message','unlock','especiallyclose_m','family_m','friend_m','romantic_m','naps','naps_dur']].describe(percentiles=[.10,.15,.20,.25,.50,.55,.60,.65,.70, .75,.80,.85,.90,.95]).round(2)\n```\n\n## Trend Analysis\n\nFirst, we explore the relationships among variables of sleep debt, screen time (\\>15 min) and message with measurement window of three hours:\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\n# Creating a special bin for 0\ndf1=df[df['screen_time']>15]\nbins = [-np.inf, 0.001] + list(range(15, 185, 5))  # 0.1 to include 0 in the first bin exclusively\ndf1['screen_time_bin'] = pd.cut(df1['screen_time'], bins=bins, right=False, include_lowest=True)\n# Recalculating the aggregated data\ngrouped = df1.groupby('screen_time_bin').agg({'sleep_debt':'mean', 'message':'mean', 'screen_time':'count'}).reset_index()\n# Replotting with the adjusted bins\nfig, ax1 = plt.subplots(figsize=(14, 8))\n# Line plot for sleep debt trend\nline1, = ax1.plot(grouped['screen_time_bin'].astype(str), grouped['sleep_debt'], color='blue', linestyle='-', marker='o', label='Sleep Debt')\n# Adding labels for sleep debt\nfor x, y in zip(grouped['screen_time_bin'].astype(str), grouped['sleep_debt']):\n    ax1.text(x, y, f'{y:.2f}', va='bottom', ha='center', color='blue')\n# Setting the left y-axis for sleep debt\nax1.set_xlabel('Screen Time (minutes)')\nax1.set_ylabel('Average Sleep Debt')\nax1.set_title('Sleep Debt, Screen Time and Message')\nax1.tick_params(axis='x', rotation=45)\n# Line plot for message count on a secondary y-axis\nax2 = ax1.twinx()\nline2, = ax2.plot(grouped['screen_time_bin'].astype(str), grouped['message'], color='darkorange', linestyle='--', marker='o', label='Message')\n# Adding labels for message count\nfor i, txt in enumerate(grouped['message']):\n    ax2.annotate(f'{txt:.2f}', (grouped['screen_time_bin'].astype(str)[i], grouped['message'][i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\nax2.set_ylabel('Message')\n# Bar plot for the number of observations on a secondary y-axis\nax3 = ax1.twinx()\nbars = ax3.bar(grouped['screen_time_bin'].astype(str), grouped['screen_time'], width=0.4, color='lightgrey', alpha=0.5, label='Number of Observations')\nax3.spines['right'].set_position(('outward', 60))  # Offset the right spine of ax3\nax3.set_ylabel('Number of Observations')\n# Labeling the number of observations above each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax3.text(bar.get_x() + bar.get_width() / 2, yval, f'{int(yval)}', va='bottom', ha='center', color='black')\n# Adjusting the plot\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.grid(False)\nax3.grid(False)\n# Adding legends\nfig.legend(loc='upper right')\nfig.tight_layout()\nplt.show()\n```\n\n## Clustering Analysis\n\n### Cluster=11\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=11,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#c27ba0',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b',   # Brown\n    '#c27ba0'\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 12):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=11)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=11,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#c27ba0',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b',   # Brown\n    '#c27ba0'\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 12):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=11)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 120)\nplt.show()\n\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 2** has the minimal sleep debt of **31.53** minutes. In comparison, **cluster 10** has the maximal sleep debt of **54.76** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 2 has the **second highest message frequency**, 79.57. It implies that message might reduce sleep debt.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 2 has the **highest close message frequency**, 49.06. It implies that close message might reduce sleep debt.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 2 has the **highest family message frequency**, 5.89. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n\n### Cluster=10\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=10,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 11):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=10)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=10,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 11):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=10)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 60)\nplt.show()\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 6** has the minimal sleep debt of **31.41** minutes. In comparison, **cluster 4** has the maximal sleep debt of **54.50** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 4 has the **second highest message frequency, 78.15**. It implies that message might reduce sleep debt.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 6 has the **highest close message frequency, 47.81**. It implies that close message might reduce sleep debt.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 6 has the **highest family message frequency, 5.83**. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n\n### Cluster=9\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=9,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 10):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=9)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=9,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 10):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=9)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 60)\nplt.show()\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 5** has the minimal sleep debt of **31.47** minutes. In comparison, **cluster 8** has the maximal sleep debt of **54.61** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **second highest message frequency, 77.59**. It implies that message might reduce sleep debt.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **highest close message frequency, 47.44**. It implies that close message might reduce sleep debt.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **highest family message frequency, 5.76**. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n\n### Cluster=8\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=8,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 9):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=8)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=8,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 9):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=8)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 60)\nplt.show()\n\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 5** has the minimal sleep debt of **31.47** minutes. In comparison, **cluster 8** has the maximal sleep debt of **54.61** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **second highest message frequency, 77.59**. It implies that message might reduce sleep debt.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **highest close message frequency, 47.44**. It implies that close message might reduce sleep debt.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **highest family message frequency, 5.76**. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n\n### Cluster=7\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=7,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 8):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=7)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=7,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 8):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=7)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 60)\nplt.show()\n\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 3** has the minimal sleep debt of **35.79** minutes. In comparison, **cluster 6** has the maximal sleep debt of **53.48** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 3 has the **a message frequency of 7.56**. It implies that message level is not necessarily associated with sleep debt level.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 3 has the **a close message frequency of 2.90**. It implies that close message level is not necessarily associated with sleep debt level.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 3 has the **a family message frequency of 0.74**. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n","srcMarkdownNoYaml":"\n\nWe cluster the smartphone use behaviors based on the three major metrics of smartphone use actions: Screen time, unlock frequency and message.\n\n## Descriptive Statistics\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nimport time;import pandas as pd;import numpy as np;import datetime\nfrom datetime import datetime;from datetime import timedelta;import sqlite3;import warnings\nimport matplotlib.pyplot as plt;import seaborn as sns;warnings.filterwarnings('ignore')\n\ndf=pd.read_csv(\"/Users/shaokangyang/Library/CloudStorage/OneDrive-Personal/Nethealth/Data/CNSA/combine/7/df7_3hr.csv\")\ndf1 = df\ndf1[['sleep_debt','sleep_duration','screen_time','message','unlock','especiallyclose_m','family_m','friend_m','romantic_m','naps','naps_dur']].describe(percentiles=[.10,.15,.20,.25,.50,.55,.60,.65,.70, .75,.80,.85,.90,.95]).round(2)\n```\n\n## Trend Analysis\n\nFirst, we explore the relationships among variables of sleep debt, screen time (\\>15 min) and message with measurement window of three hours:\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\n# Creating a special bin for 0\ndf1=df[df['screen_time']>15]\nbins = [-np.inf, 0.001] + list(range(15, 185, 5))  # 0.1 to include 0 in the first bin exclusively\ndf1['screen_time_bin'] = pd.cut(df1['screen_time'], bins=bins, right=False, include_lowest=True)\n# Recalculating the aggregated data\ngrouped = df1.groupby('screen_time_bin').agg({'sleep_debt':'mean', 'message':'mean', 'screen_time':'count'}).reset_index()\n# Replotting with the adjusted bins\nfig, ax1 = plt.subplots(figsize=(14, 8))\n# Line plot for sleep debt trend\nline1, = ax1.plot(grouped['screen_time_bin'].astype(str), grouped['sleep_debt'], color='blue', linestyle='-', marker='o', label='Sleep Debt')\n# Adding labels for sleep debt\nfor x, y in zip(grouped['screen_time_bin'].astype(str), grouped['sleep_debt']):\n    ax1.text(x, y, f'{y:.2f}', va='bottom', ha='center', color='blue')\n# Setting the left y-axis for sleep debt\nax1.set_xlabel('Screen Time (minutes)')\nax1.set_ylabel('Average Sleep Debt')\nax1.set_title('Sleep Debt, Screen Time and Message')\nax1.tick_params(axis='x', rotation=45)\n# Line plot for message count on a secondary y-axis\nax2 = ax1.twinx()\nline2, = ax2.plot(grouped['screen_time_bin'].astype(str), grouped['message'], color='darkorange', linestyle='--', marker='o', label='Message')\n# Adding labels for message count\nfor i, txt in enumerate(grouped['message']):\n    ax2.annotate(f'{txt:.2f}', (grouped['screen_time_bin'].astype(str)[i], grouped['message'][i]), textcoords=\"offset points\", xytext=(0,10), ha='center')\nax2.set_ylabel('Message')\n# Bar plot for the number of observations on a secondary y-axis\nax3 = ax1.twinx()\nbars = ax3.bar(grouped['screen_time_bin'].astype(str), grouped['screen_time'], width=0.4, color='lightgrey', alpha=0.5, label='Number of Observations')\nax3.spines['right'].set_position(('outward', 60))  # Offset the right spine of ax3\nax3.set_ylabel('Number of Observations')\n# Labeling the number of observations above each bar\nfor bar in bars:\n    yval = bar.get_height()\n    ax3.text(bar.get_x() + bar.get_width() / 2, yval, f'{int(yval)}', va='bottom', ha='center', color='black')\n# Adjusting the plot\nax1.grid(True, which='both', linestyle='--', linewidth=0.5)\nax2.grid(False)\nax3.grid(False)\n# Adding legends\nfig.legend(loc='upper right')\nfig.tight_layout()\nplt.show()\n```\n\n## Clustering Analysis\n\n### Cluster=11\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=11,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#c27ba0',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b',   # Brown\n    '#c27ba0'\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 12):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=11)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=11,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#c27ba0',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b',   # Brown\n    '#c27ba0'\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 12):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=11)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 120)\nplt.show()\n\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 2** has the minimal sleep debt of **31.53** minutes. In comparison, **cluster 10** has the maximal sleep debt of **54.76** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 2 has the **second highest message frequency**, 79.57. It implies that message might reduce sleep debt.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 2 has the **highest close message frequency**, 49.06. It implies that close message might reduce sleep debt.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 2 has the **highest family message frequency**, 5.89. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n\n### Cluster=10\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=10,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 11):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=10)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=10,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 11):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=10)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 60)\nplt.show()\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 6** has the minimal sleep debt of **31.41** minutes. In comparison, **cluster 4** has the maximal sleep debt of **54.50** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 4 has the **second highest message frequency, 78.15**. It implies that message might reduce sleep debt.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 6 has the **highest close message frequency, 47.81**. It implies that close message might reduce sleep debt.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 6 has the **highest family message frequency, 5.83**. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n\n### Cluster=9\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=9,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 10):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=9)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=9,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 10):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=9)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 60)\nplt.show()\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 5** has the minimal sleep debt of **31.47** minutes. In comparison, **cluster 8** has the maximal sleep debt of **54.61** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **second highest message frequency, 77.59**. It implies that message might reduce sleep debt.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **highest close message frequency, 47.44**. It implies that close message might reduce sleep debt.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **highest family message frequency, 5.76**. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n\n### Cluster=8\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=8,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 9):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=8)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=8,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 9):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=8)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 60)\nplt.show()\n\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 5** has the minimal sleep debt of **31.47** minutes. In comparison, **cluster 8** has the maximal sleep debt of **54.61** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **second highest message frequency, 77.59**. It implies that message might reduce sleep debt.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **highest close message frequency, 47.44**. It implies that close message might reduce sleep debt.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 5 has the **highest family message frequency, 5.76**. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n\n### Cluster=7\n\n#### Front view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=7,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 8):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=7)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nplt.show()\n```\n\n#### Rear view\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nrandom_seed = 1\n#df1 = df[df['message'] < 240]\ndf1=df\ndf1.loc[df1['unlock'] > 41, 'unlock'] = 41;df1.loc[df1['message'] > 96, 'message'] = 96\n# Normalizing the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df1[['screen_time', 'unlock', 'message']])\n# KMeans clustering on normalized data\nkmeans = KMeans(n_clusters=7,random_state=random_seed)\nclusters = kmeans.fit_predict(df_scaled)\n# Adding the cluster data to the original dataframe\ndf1['cluster'] = clusters+1\n# Visualizing the clusters in 3D with normalized data\n# Custom colors for each cluster (12 in total)\nnature_colors = [\n    '#1f77b4',  # Blue\n    '#ff7f0e',  # Orange\n    '#2ca02c',  # Green\n    '#d62728',  # Red\n    '#9467bd',  # Purple\n    '#ffbb78',  # Light Orange\n    '#7a876f',  # Pink\n    '#17becf',  # Gray\n    '#bcbd22',  # Olive\n    '#FFC300',  # Yellow\n    '#aec7e8',  # Light Blue\n    '#8c564b'   # Brown\n]\nfig = plt.figure(figsize=(16, 9.6))\nax = fig.add_subplot(111, projection='3d')\n# Plotting each cluster with a custom color\nfor i in range(1, 8):  # Cluster numbers now range from 1 to 12\n    cluster_data = df1[df1['cluster'] == i]\n    ax.scatter(cluster_data['screen_time'], cluster_data['unlock'], cluster_data['message'], \n               color=nature_colors[i - 1], label=f'Cluster {i}', marker='o')\nax.set_title('Behavior Segmentation for Smartphone Use (Cluster=7)')\nax.set_xlabel('Screen Time (minutes)')\nax.set_ylabel('Unlock Frequency')\nax.set_zlabel('Number of Messages')\n# Legend\nax.legend(title=\"Clusters\")\nax.view_init(30, 60)\nplt.show()\n\n```\n\n### Descriptive Statistics by Cluster\n\n#### Sleep Debt\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\n\nsummary = df.groupby('cluster')['sleep_debt'].describe().round(2)\nprint(summary)\n```\n\nThe above summary suggests that **cluster 3** has the minimal sleep debt of **35.79** minutes. In comparison, **cluster 6** has the maximal sleep debt of **53.48** minutes.\n\n#### Screen Time\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['screen_time'].describe().round(2)\nprint(summary)\n\n```\n\n#### Unlock\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['unlock'].describe().round(2)\nprint(summary)\n```\n\n#### Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['message'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 3 has the **a message frequency of 7.56**. It implies that message level is not necessarily associated with sleep debt level.\n\n#### Close Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['especiallyclose_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 3 has the **a close message frequency of 2.90**. It implies that close message level is not necessarily associated with sleep debt level.\n\n#### Family Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['family_m'].describe().round(2)\nprint(summary)\n```\n\nThe table above suggests the cluster 3 has the **a family message frequency of 0.74**. It implies that family message might reduce sleep debt.\n\n#### Friend Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['friend_m'].describe().round(2)\nprint(summary)\n```\n\n#### Romantic Message\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['romantic_m'].describe().round(2)\nprint(summary)\n```\n\n#### Steps\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nsummary = df.groupby('cluster')['steps'].describe().round(1)\nprint(summary)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":[5,30,125],"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"number-sections":true,"output-file":"cluster.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","resource-files":["pdfs/*"],"body-header":"This page brought to you by <https://example.com>\n","theme":"cosmo","grid":{"sidebar-width":"350px"},"title-block-banner":true,"title":"Behavior Segmentation for Smartphone Use ","date":"12/09/2023","date-modified":"last-modified","date-format":"full","categories":["Paper1"],"image":"cluster1.png","page-layout":"full"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}