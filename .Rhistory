<<<<<<< HEAD
=======
# Creating the plot
p <- ggplot(grouped, aes(x = screen_time_bin)) +
# Line plot for sleep debt
geom_line(aes(y = sleep_debt, color = "Sleep Debt"), size = 1) +
geom_point(aes(y = sleep_debt, color = "Sleep Debt"), size = 2) +
geom_text(aes(y = sleep_debt, label = sprintf("%.2f", sleep_debt)),
vjust = -1, color = "purple", size = 3) +
# Line plot for message count
geom_line(aes(y = message, color = "Message"), linetype = "dashed", size = 1) +
geom_point(aes(y = message, color = "Message"), size = 2) +
geom_text(aes(y = message, label = sprintf("%.2f", message)),
vjust = -1, color = "darkorange", size = 3) +
# Bar plot for screen time counts
geom_bar(aes(y = screen_time_count, fill = "Number of Observations"),
stat = "identity", alpha = 0.3, width = 0.5) +
# Customizing scales
scale_y_continuous(name = "Average Sleep Debt", sec.axis = sec_axis(~., name = "Message")) +
scale_fill_manual(values = c("Number of Observations" = "lightgrey")) +
scale_color_manual(values = c("Sleep Debt" = "purple", "Message" = "darkorange")) +
# Theme adjustments
theme_minimal(base_family = "Times New Roman") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
>>>>>>> 9fb7db76d8cc8015e60c2bbe5db6f52723cb8ab0
axis.title.y = element_text(size = 14),
legend.position = "top",
legend.title = element_blank()
) +
# Adding grid lines
theme(panel.grid.major = element_line(color = "grey80", linetype = "dashed")) +
# Labels and titles
labs(
x = "Screen Time (minutes)",
y = "Average Sleep Debt"
)
# Save the plot
ggsave("/Users/shaokangyang/Downloads/raw1.svg", plot = p, width = 14, height = 8, dpi = 300, device = "svg")
# Display the plot
print(p)
#read data
df1<-read.csv("/Users/shaokangyang/Library/CloudStorage/GoogleDrive-sky.ang510@gmail.com/My Drive/Nethealth/Data/CNSA/combine/7/df7_3hr.csv")
# Assume df1 is already loaded as a data frame
# Creating bins for screen time
bins <- seq(10, 185, by = 5)
df1 <- df1 %>%
mutate(screen_time_bin = cut(screen_time, breaks = bins, right = FALSE, include.lowest = TRUE))
# Aggregating data
grouped <- df1 %>%
group_by(screen_time_bin) %>%
summarise(
sleep_debt = mean(sleep_debt, na.rm = TRUE),
message = mean(message, na.rm = TRUE),
screen_time_count = n()
)
# Convert screen_time_bin to character for better plotting
grouped <- grouped %>%
mutate(screen_time_bin = as.character(screen_time_bin))
# Creating the plot
p <- ggplot(grouped, aes(x = screen_time_bin)) +
# Line plot for sleep debt
geom_line(aes(y = sleep_debt, color = "Sleep Debt"), size = 1) +
geom_point(aes(y = sleep_debt, color = "Sleep Debt"), size = 2) +
geom_text(aes(y = sleep_debt, label = sprintf("%.2f", sleep_debt)),
vjust = -1, color = "purple", size = 3) +
# Line plot for message count
geom_line(aes(y = message, color = "Message"), linetype = "dashed", size = 1) +
geom_point(aes(y = message, color = "Message"), size = 2) +
geom_text(aes(y = message, label = sprintf("%.2f", message)),
vjust = -1, color = "darkorange", size = 3) +
# Bar plot for screen time counts
geom_bar(aes(y = screen_time_count, fill = "Number of Observations"),
stat = "identity", alpha = 0.3, width = 0.5) +
# Customizing scales
scale_y_continuous(name = "Average Sleep Debt", sec.axis = sec_axis(~., name = "Message")) +
scale_fill_manual(values = c("Number of Observations" = "lightgrey")) +
scale_color_manual(values = c("Sleep Debt" = "purple", "Message" = "darkorange")) +
# Theme adjustments
theme_minimal(base_family = "Times New Roman") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.position = "top",
legend.title = element_blank()
) +
# Adding grid lines
theme(panel.grid.major = element_line(color = "grey80", linetype = "dashed")) +
# Labels and titles
labs(
x = "Screen Time (minutes)",
y = "Average Sleep Debt"
)
# Save the plot
ggsave("/Users/shaokangyang/Downloads/raw1.svg", plot = p, width = 14, height = 8, dpi = 300, device = "svg")
# Display the plot
print(p)
library(ggplot2)
library(dplyr)
library(scales)
# Assume df1 is already loaded as a data frame
# Creating bins for screen time
bins <- seq(10, 185, by = 5)
df1 <- df1 %>%
mutate(screen_time_bin = cut(screen_time, breaks = bins, right = FALSE, include.lowest = TRUE))
# Aggregating data
grouped <- df1 %>%
group_by(screen_time_bin) %>%
summarise(
sleep_debt = mean(sleep_debt, na.rm = TRUE),
message = mean(message, na.rm = TRUE),
screen_time_count = n()
)
# Convert screen_time_bin to character for better plotting
grouped <- grouped %>%
mutate(screen_time_bin = as.character(screen_time_bin))
# Rescaling secondary y-axis data
grouped <- grouped %>%
mutate(
message_rescaled = rescale(message, to = range(sleep_debt, na.rm = TRUE)),
screen_time_rescaled = rescale(screen_time_count, to = range(sleep_debt, na.rm = TRUE))
)
# Creating the plot
p <- ggplot(grouped, aes(x = screen_time_bin)) +
# Line plot for sleep debt
geom_line(aes(y = sleep_debt, color = "Sleep Debt"), size = 1) +
geom_point(aes(y = sleep_debt, color = "Sleep Debt"), size = 2) +
geom_text(aes(y = sleep_debt, label = sprintf("%.2f", sleep_debt)),
vjust = -1, color = "purple", size = 3) +
# Line plot for message count (rescaled)
geom_line(aes(y = message_rescaled, color = "Message"), linetype = "dashed", size = 1) +
geom_point(aes(y = message_rescaled, color = "Message"), size = 2) +
geom_text(aes(y = message_rescaled, label = sprintf("%.2f", message)),
vjust = -1, color = "darkorange", size = 3) +
# Bar plot for screen time counts (rescaled)
geom_bar(aes(y = screen_time_rescaled, fill = "Number of Observations"),
stat = "identity", alpha = 0.3, width = 0.5) +
# Customizing scales
scale_y_continuous(
name = "Average Sleep Debt",
sec.axis = sec_axis(~rescale(., from = range(sleep_debt, na.rm = TRUE), to = range(message, na.rm = TRUE)),
name = "Message")
) +
scale_fill_manual(values = c("Number of Observations" = "lightgrey")) +
scale_color_manual(values = c("Sleep Debt" = "purple", "Message" = "darkorange")) +
# Theme adjustments
theme_minimal(base_family = "Times New Roman") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.text.y = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.position = "top",
legend.title = element_blank()
) +
# Adding grid lines
theme(panel.grid.major = element_line(color = "grey80", linetype = "dashed")) +
# Labels and titles
labs(
x = "Screen Time (minutes)",
y = "Average Sleep Debt"
)
# Save the plot
ggsave("/Users/shaokangyang/Downloads/raw1.svg", plot = p, width = 14, height = 8, dpi = 300, device = "svg")
library(ggplot2)
library(dplyr)
library(ggtext); library(svglite)
#read data
df<-read.csv("/Users/shaokangyang/Library/CloudStorage/GoogleDrive-sky.ang510@gmail.com/My Drive/Nethealth/Data/CNSA/combine/7/df7_3hr.csv")
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Assuming 'df' is the original dataframe
# Creating bins for screen time
bins <- seq(10, 185, by = 5)
df <- df %>%
mutate(screen_time_bin = cut(screen_time, breaks = bins, right = FALSE, include.lowest = TRUE))
# Aggregating data
grouped <- df %>%
group_by(screen_time_bin) %>%
summarise(
avg_sleep_debt = mean(sleep_debt, na.rm = TRUE),
avg_message = mean(message, na.rm = TRUE),
count = n()
)
# Convert screen_time_bin to a factor for proper ordering
grouped <- grouped %>%
mutate(screen_time_bin = factor(screen_time_bin, levels = unique(screen_time_bin)))
# Plotting
p <- ggplot(data = grouped, aes(x = screen_time_bin)) +
# Line plot for sleep debt trend
geom_line(aes(y = avg_sleep_debt, group = 1, color = "Sleep Debt"), size = 1) +
geom_point(aes(y = avg_sleep_debt, color = "Sleep Debt"), size = 2) +
geom_text(aes(y = avg_sleep_debt, label = round(avg_sleep_debt, 2)),
vjust = -0.5, color = "purple", size = 3) +
# Line plot for message trend
geom_line(aes(y = avg_message, group = 1, color = "Message"), linetype = "dashed", size = 1) +
geom_point(aes(y = avg_message, color = "Message"), size = 2) +
geom_text(aes(y = avg_message, label = round(avg_message, 2)),
vjust = -0.5, color = "darkorange", size = 3) +
# Bar plot for number of observations
geom_bar(aes(y = count, fill = "Number of Observations"), stat = "identity", alpha = 0.3, width = 0.4) +
# Scales and axis labels
scale_y_continuous(
name = "Average Sleep Debt",
sec.axis = sec_axis(~., name = "Message Count"),
expand = expansion(mult = c(0, 0.1))
) +
scale_color_manual(
values = c("Sleep Debt" = "purple", "Message" = "darkorange"),
guide = guide_legend(title = NULL)
) +
scale_fill_manual(
values = c("Number of Observations" = "lightgrey"),
guide = guide_legend(title = NULL)
) +
labs(
x = "Screen Time (minutes)",
title = "Trends of Sleep Debt, Messages, and Observations"
) +
theme_minimal(base_family = "Times New Roman") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.position = "top"
)
# Save plot as SVG
ggsave("/Users/shaokangyang/Downloads/raw1.svg", p, width = 14, height = 8, dpi = 300, device = "svg")
df <- df %>%
filter(screen_time > 10)
# Assuming 'df' is the original dataframe
# Creating bins for screen time
bins <- seq(10, 185, by = 5)
df <- df %>%
mutate(screen_time_bin = cut(screen_time, breaks = bins, right = FALSE, include.lowest = TRUE))
# Aggregating data
grouped <- df %>%
group_by(screen_time_bin) %>%
summarise(
avg_sleep_debt = mean(sleep_debt, na.rm = TRUE),
avg_message = mean(message, na.rm = TRUE),
count = n()
)
# Convert screen_time_bin to a factor for proper ordering
grouped <- grouped %>%
mutate(screen_time_bin = factor(screen_time_bin, levels = unique(screen_time_bin)))
# Plotting
p <- ggplot(data = grouped, aes(x = screen_time_bin)) +
# Line plot for sleep debt trend
geom_line(aes(y = avg_sleep_debt, group = 1, color = "Sleep Debt"), size = 1) +
geom_point(aes(y = avg_sleep_debt, color = "Sleep Debt"), size = 2) +
geom_text(aes(y = avg_sleep_debt, label = round(avg_sleep_debt, 2)),
vjust = -0.5, color = "purple", size = 3) +
# Line plot for message trend
geom_line(aes(y = avg_message, group = 1, color = "Message"), linetype = "dashed", size = 1) +
geom_point(aes(y = avg_message, color = "Message"), size = 2) +
geom_text(aes(y = avg_message, label = round(avg_message, 2)),
vjust = -0.5, color = "darkorange", size = 3) +
# Bar plot for number of observations
geom_bar(aes(y = count, fill = "Number of Observations"), stat = "identity", alpha = 0.3, width = 0.4) +
# Scales and axis labels
scale_y_continuous(
name = "Average Sleep Debt",
sec.axis = sec_axis(~., name = "Message Count"),
expand = expansion(mult = c(0, 0.1))
) +
scale_color_manual(
values = c("Sleep Debt" = "purple", "Message" = "darkorange"),
guide = guide_legend(title = NULL)
) +
scale_fill_manual(
values = c("Number of Observations" = "lightgrey"),
guide = guide_legend(title = NULL)
) +
labs(
x = "Screen Time (minutes)",
title = "Trends of Sleep Debt, Messages, and Observations"
) +
theme_minimal(base_family = "Times New Roman") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.position = "top"
)
# Save plot as SVG
ggsave("/Users/shaokangyang/Downloads/raw1.svg", p, width = 14, height = 8, dpi = 300, device = "svg")
-.815447/(2*.0044317)
install.packages("AugSynth")
library(AugSynth)
install.packages("AugSynth")
# Example for installing from a local file
install.packages("/path/to/AugSynth.tar.gz", repos = NULL, type = "source")
library(AugSynth)
install.packages("devtools")
# Use devtools to install the package from GitHub
devtools::install_github("ebenmichael/augsynth")
library(AugSynth)
library(AugSynth)
library(augsynth)
?augsynth
0.58*0.6
98/1.6
0.6125*0.6
55.64-46.31
library(augsynth)
?augsynth
?ggplot
?augsynth
0.5706/(2*0.0024)
0.7163/(2*0.0039)
34330/60170
34330/61250
34430/480
61250/480
17/127
3650/(3650+81250)
86400/3600
1440/60
0.6984/(0.0038*2)
0.7170/(2*0.0039)
-.7760707/(2*.0041123)
0.7626/(2*0.004)
0.8922/(2*0.0048)
0.7394/(2*0.0039)
0.7626/(2*0.004)
0.71098/(2*0.00389)
0.66707/(2*.0031)
0.60668/(2*0.00353)
1.71*3.778192/175.513212
2.127**3.778192/175.513212
2.127**3.778192
1.71*3.778192
33.444-32.712
exp(0.076)
exp(-0.076)
exp(0.51)
ln(0.51)
log(0.51)
logb(0.51)
log10(0.51)
e^0.51
2.618*2.24
5.86432/209
exp(-0.076)
0.69091/(-2*0.00320)
2.315/0.27
0.78786/(-2*0.00402)
29/6
22/6
17160/23310
32376+30204+30759+30016+31507+30467
32433+28941+31437+28878+31650+32162
5,000+4,420+4,898+4,391+4,635+4,850
5000+4420+4898+4391+4635+4850
4932+4485+4640+4544+4752	4,518
4932+4485+4640+4544+4752+4518
7*0.33
26*0.15
3.9-2.31
1.59/33
300/1300
library(foreign) ; library(tsModel) ; library("lmtest") ; library("Epi")
library(foreign) ; library(tsModel) ; library("lmtest") ; library("Epi")
# Install packages required for the analysis (uncomment if needed)
install.packages("lmtest") ; install.packages("Epi")
install.packages("tsModel"); install.packages("vcd")
library(foreign) ; library(tsModel) ; library("lmtest") ; library("Epi")
library("splines") ; library("vcd")
library(foreign) ; library(tsModel) ; library("lmtest") ; library("Epi")
library("splines") ; library("vcd")
# read data from csv file
data <- read.csv("/Users/shaokangyang/Library/CloudStorage/GoogleDrive-sky.ang510@gmail.com/My Drive/Literature/Replication/dyw098_supp/sicily.csv")
head(data)
View(data)
# compute the standardized rates
data$rate <- with(data, aces/stdpop*10^5)
# start the plot, excluding the points and the x-axis
plot(data$rate,type="n",ylim=c(00,300),xlab="Year", ylab="Std rate x 10,000",
bty="l",xaxt="n")
# shade the post intervention period grey
rect(36,0,60,300,col=grey(0.9),border=F)
# plot the observed rate for pre-intervention period
points(data$rate[data$smokban==0],cex=0.7)
#specify the x-axis (i.e. time units)
axis(1,at=0:5*12,labels=F)
axis(1,at=0:4*12+6,tick=F,labels=2002:2006)
# add a title
title("Sicily, 2002-2006")
# It is also useful to produce summary statistics
summary(data)
#tabulate aces before and after the smoking ban
summary(data$aces[data$smokban==0])
summary(data$aces[data$smokban==1])
summary(data$rate[data$smokban==0])
summary(data$rate[data$smokban==1])
#Poisson with the standardised population as an offset
model1 <- glm(aces ~ offset(log(stdpop)) + smokban + time, family=poisson, data)
summary(model1)
summary(model1)$dispersion
round(ci.lin(model1,Exp=T),3)
# create a new dataframe with 0.1 time units to improve the graph
datanew <- data.frame(stdpop=mean(data$stdpop),smokban=rep(c(0,1),c(360,240)),
time= 1:600/10,month=rep(1:120/10,5))
# We generate predicted values based on the model in order to create a plot
pred1 <- predict(model1,type="response",datanew)/mean(data$stdpop)*10^5
#This can then be plotted along with a scatter graph (see above)
plot(data$rate,type="n",ylim=c(0,300),xlab="Year",ylab="Std rate x 10,000",
bty="l",xaxt="n")
rect(36,0,60,300,col=grey(0.9),border=F)
points(data$rate,cex=0.7)
axis(1,at=0:5*12,labels=F)
axis(1,at=0:4*12+6,tick=F,labels=2002:2006)
lines((1:600/10),pred1,col=2)
title("Sicily, 2002-2006")
# to plot the counterfactual scenario we create a data frame as if smokban
#   (the intervention) was never being implemented
datanew <- data.frame(stdpop=mean(data$stdpop),smokban=0,time=1:600/10,
month=rep(1:120/10,5))
# generate predictions under the counterfactual scenario and add it to the plot
pred1b <- predict(model1,datanew,type="response")/mean(data$stdpop)*10^5
lines(datanew$time,pred1b,col=2,lty=2)
# return the data frame to the scenario including the intervention
datanew <- data.frame(stdpop=mean(data$stdpop),smokban=rep(c(0,1),c(360,240)),
time= 1:600/10,month=rep(1:120/10,5))
model2 <- glm(aces ~ offset(log(stdpop)) + smokban + time, family=quasipoisson,
data)
summary(model2)
summary(model2)$dispersion
round(ci.lin(model2,Exp=T),3)
# Check the residuals by plotting against time
res2 <- residuals(model2,type="deviance")
plot(data$time,res2,ylim=c(-5,10),pch=19,cex=0.7,col=grey(0.6),
main="Residuals over time",ylab="Deviance residuals",xlab="Date")
abline(h=0,lty=2,lwd=2)
# Further check for autocorrelation by examining the autocorrelation and
#   partial autocorrelation functions
acf(res2)
pacf(res2)
#c) adjusting for seasonality
# There are various ways of adjusting for seasonality - here we use harmonic
#   terms specifying the number of sin and cosine pairs to include (in this
#   case 2) and the length of the period (12 months)
model3 <- glm(aces ~ offset(log(stdpop)) + smokban + time +
harmonic(month,2,12), family=quasipoisson, data)
summary(model3)
summary(model3)$dispersion
round(ci.lin(model3,Exp=T),3)
# EFFECTS
ci.lin(model3,Exp=T)["smokban",5:7]
# TREND
exp(coef(model3)["time"]*12)
# We again check the model and autocorrelation functions
res3 <- residuals(model3,type="deviance")
plot(res3,ylim=c(-5,10),pch=19,cex=0.7,col=grey(0.6),main="Residuals over time",
ylab="Deviance residuals",xlab="Date")
abline(h=0,lty=2,lwd=2)
acf(res3)
pacf(res3)
# predict and plot of the seasonally adjusted model
pred3 <- predict(model3,type="response",datanew)/mean(data$stdpop)*10^5
plot(data$rate,type="n",ylim=c(120,300),xlab="Year",ylab="Std rate x 10,000",
bty="l",xaxt="n")
rect(36,120,60,300,col=grey(0.9),border=F)
points(data$rate,cex=0.7)
axis(1,at=0:5*12,labels=F)
axis(1,at=0:4*12+6,tick=F,labels=2002:2006)
lines(1:600/10,pred3,col=2)
title("Sicily, 2002-2006")
# it is sometimes difficult to clearly see the change graphically in the
#   seasonally adjusted model, therefore it can be useful to plot a straight
#   line representing a 'deseasonalised' trend
# this can be done by predicting all the observations for the same month, in
#   this case we use June
pred3b <- predict(model3,type="response",transform(datanew,month=6))/
mean(data$stdpop)*10^5
#this can then be added to the plot as a dashed line
lines(1:600/10,pred3b,col=2,lty=2)
# add a change-in-slope
# we parameterize it as an interaction between time and the ban indicator
model4 <- glm(aces ~ offset(log(stdpop)) + smokban*time + harmonic(month,2,12),
family=quasipoisson, data)
summary(model4)
round(ci.lin(model4,Exp=T),3)
# predict and plot the 'deseasonalised' trend
# compare it with the step-change only model
pred4b <- predict(model4,type="response",transform(datanew,month=6))/
mean(data$stdpop)*10^5
plot(data$rate,type="n",ylim=c(120,300),xlab="Year",ylab="Std rate x 10,000",
bty="l",xaxt="n")
rect(36,120,60,300,col=grey(0.9),border=F)
points(data$rate,cex=0.7)
axis(1,at=0:5*12,labels=F)
axis(1,at=0:4*12+6,tick=F,labels=2002:2006)
lines(1:600/10,pred3b,col=2)
lines(1:600/10,pred4b,col=4)
title("Sicily, 2002-2006")
legend("topleft",c("Step-change only","Step-change + change-in-slope"),lty=1,
col=c(2,4),inset=0.05,bty="n",cex=0.7)
# test if the change-in-slope improve the fit
# the selected test here is an F-test, which accounts for the overdispersion,
#   while in other cases a likelihood ratio or wald test can be applied
anova(model3,model4,test="F")
?tsModel
??tsModel
# load the packages
library(foreign) ; library(tsModel) ; library("lmtest") ; library("Epi")
library("splines") ; library("vcd")
160882/229281
153363/214773
<<<<<<< HEAD
library(tidybayes)
library(tidybayes)
install.packages("tidybayes")
library(tidybayes)
library(tidybayes)
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
library(ggrepel)
install.packages("ggrepel")
install.packages("patchwork")
install.packages("gt")
library(gt)
library(gt)
library(gt)
library(tidybayes)
library(kableExtra)
library(ggrepel)
library(patchwork)
library(gt)
library(tidybayes)
library(kableExtra)
library(ggrepel)
library(patchwork)
library(gt)
=======
>>>>>>> 9fb7db76d8cc8015e60c2bbe5db6f52723cb8ab0
