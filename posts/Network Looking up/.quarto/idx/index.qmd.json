{"title":"Behavior Segmentation for Smartphone Use","markdown":{"yaml":{"title":"Behavior Segmentation for Smartphone Use ","date":"03/10/2024","date-modified":"last-modified","date-format":"full","categories":["Paper1"],"image":"cluster1.png","tbl-colwidths":[5,30,125],"format":{"html":{"page-layout":"full"}}},"headingText":"Descriptive Statistics","containsRefs":false,"markdown":"\n\nWe cluster the smartphone use behaviors based on the three major metrics of smartphone use actions: Screen time, unlock frequency and message.\n\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nimport time;import pandas as pd;import numpy as np;import datetime\nfrom datetime import datetime;from datetime import timedelta;import sqlite3;import warnings\nimport matplotlib.pyplot as plt;import seaborn as sns;warnings.filterwarnings('ignore')\n\ndf=pd.read_csv(\"/Users/shaokangyang/Library/CloudStorage/OneDrive-Personal/Nethealth/Data/CNSA/combine/7/df7_3hr.csv\")\nimport plotly.graph_objs as go\n# Combine and format labels with their mean values for each category\n# Close Degree labels with their means\nlabels_close_degree = [\n    f'Especially Close: {df[\"especiallyclose_m\"].mean():.2f}',\n    f'Merely Close: {df[\"merelyclose_m\"].mean():.2f}',\n    f'Less Than Close: {df[\"lessthanclose_m\"].mean():.2f}',\n    f'Distant: {df[\"distant_m\"].mean():.2f}',\n    f'Close Unknown: {df[\"close_unknown_m\"].mean():.2f}'\n]\n\n# Message Type labels with their means\nlabels_message_type = [\n    f'SMS: {df[\"sms\"].mean():.2f}',\n    f'MMS: {df[\"mms\"].mean():.2f}',\n    f'WhatsApp: {df[\"whatsapp\"].mean():.2f}'\n]\n\n# Contact Type labels with their means\nlabels_contact_type = [\n    f'Acquaintance: {df[\"acquaintance_m\"].mean():.2f}',\n    f'Co-member Organization: {df[\"comemberorganization_m\"].mean():.2f}',\n    f'Coworker: {df[\"coworker_m\"].mean():.2f}',\n    f'Friend: {df[\"friend_m\"].mean():.2f}',\n    f'Neighbor: {df[\"neighbor_m\"].mean():.2f}',\n    f'Other Family: {df[\"otherfamily_m\"].mean():.2f}',\n    f'Romantic: {df[\"romantic_m\"].mean():.2f}',\n    f'Parent: {df[\"parent_m\"].mean():.2f}',\n    f'Step Parent: {df[\"stepparent_m\"].mean():.2f}',\n    f'Sibling: {df[\"sibling_m\"].mean():.2f}',\n    f'Step Sibling: {df[\"stepsibling_m\"].mean():.2f}',\n    f'Relation Unknown: {df[\"rela_unknown_m\"].mean():.2f}'\n]\n\n# Combine all labels for nodes\nlabels = labels_close_degree + labels_message_type + labels_contact_type\n\n# Initialize the lists for the source, target, and value arrays for the Sankey diagram\nsource = [\n    # Close Degree to Message Type\n    0, 0, 0,  # Especially Close to SMS, MMS, WhatsApp\n    1, 1, 1,  # Merely Close to SMS, MMS, WhatsApp\n    2, 2, 2,  # Less Than Close to SMS, MMS, WhatsApp\n    3, 3, 3,  # Distant to SMS, MMS, WhatsApp\n    4, 4, 4   # Close Unknown to SMS, MMS, WhatsApp\n] + [\n    # Message Type to Contact Type\n    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  # SMS to all contact types\n    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,  # MMS to all contact types\n    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7   # WhatsApp to all contact types\n]\n\ntarget = [\n    # Close Degree to Message Type\n    5, 6, 7,  # Especially Close to SMS, MMS, WhatsApp\n    5, 6, 7,  # Merely Close to SMS, MMS, WhatsApp\n    5, 6, 7,  # Less Than Close to SMS, MMS, WhatsApp\n    5, 6, 7,  # Distant to SMS, MMS, WhatsApp\n    5, 6, 7   # Close Unknown to SMS, MMS, WhatsApp\n] + [\n    # Message Type to Contact Type\n    8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,  # SMS to all contact types\n    8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,  # MMS to all contact types\n    8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19   # WhatsApp to all contact types\n]\n\n# Values for all connections (assuming you have these means calculated correctly in your DataFrame)\n#Judge if any of the following columns are not in the dataframe, create them and fill them with 0\nfor col in ['sms_acquaintance', 'sms_comemberorganization', 'sms_coworker', 'sms_friend', 'sms_neighbor', 'sms_otherfamily', 'sms_romanticpartner', 'sms_parent', 'sms_stepparent', 'sms_sibling', 'sms_stepsibling', 'sms_blank', 'mms_acquaintance', 'mms_comemberorganization', 'mms_coworker', 'mms_friend', 'mms_neighbor', 'mms_otherfamily', 'mms_romanticpartner', 'mms_parent', 'mms_stepparent', 'mms_sibling', 'mms_stepsibling', 'mms_blank', 'whatsapp_acquaintance', 'whatsapp_comemberorganization', 'whatsapp_coworker', 'whatsapp_friend', 'whatsapp_neighbor', 'whatsapp_otherfamily', 'whatsapp_romanticpartner', 'whatsapp_parent', 'whatsapp_stepparent', 'whatsapp_sibling', 'whatsapp_stepsibling', 'whatsapp_blank']:\n    if col not in df.columns:\n        df[col] = 0\nvalue = [\n    # Close Degree to Message Type values\n    df['sms_especiallyclose'].mean(), df['mms_especiallyclose'].mean(), df['whatsapp_especiallyclose'].mean(),\n    df['sms_merelyclose'].mean(), df['mms_merelyclose'].mean(), df['whatsapp_merelyclose'].mean(),\n    df['sms_lessthanclose'].mean(), df['mms_lessthanclose'].mean(), df['whatsapp_lessthanclose'].mean(),\n    df['sms_distant'].mean(), df['mms_distant'].mean(), df['whatsapp_distant'].mean(),\n    df['sms_blank'].mean(), df['mms_blank'].mean(), df['whatsapp_blank'].mean()\n] + [\n\n    df['sms_acquaintance'].mean(), df['sms_comemberorganization'].mean(), df['sms_coworker'].mean(), df['sms_friend'].mean(),\n    df['sms_neighbor'].mean(), df['sms_otherfamily'].mean(), df['sms_romanticpartner'].mean(), df['sms_parent'].mean(),\n    df['sms_stepparent'].mean(), df['sms_sibling'].mean(), df['sms_stepsibling'].mean(), df['sms_blank'].mean(),\n    df['mms_acquaintance'].mean(), df['mms_comemberorganization'].mean(), df['mms_coworker'].mean(), df['mms_friend'].mean(),\n    df['mms_neighbor'].mean(), df['mms_otherfamily'].mean(), df['mms_romanticpartner'].mean(), df['mms_parent'].mean(),\n    df['mms_stepparent'].mean(), df['mms_sibling'].mean(), df['mms_stepsibling'].mean(), df['mms_blank'].mean(),\n    df['whatsapp_acquaintance'].mean(), df['whatsapp_comemberorganization'].mean(),df['whatsapp_coworker'].mean(), df['whatsapp_friend'].mean(), df['whatsapp_neighbor'].mean(),\n    df['whatsapp_otherfamily'].mean(), df['whatsapp_romanticpartner'].mean(),\n    df['whatsapp_parent'].mean(), df['whatsapp_stepparent'].mean(), df['whatsapp_sibling'].mean(), df['whatsapp_stepsibling'].mean(),df['whatsapp_blank'].mean()\n]\n\n# Create and display the Sankey diagram\nfig = go.Figure(data=[go.Sankey(\n    node=dict(\n        pad=15,\n        thickness=20,\n        line=dict(color='black', width=0.5),\n        label=labels\n    ),\n    link=dict(\n        source=source,\n        target=target,\n        value=value\n    ))])\n\nfig.update_layout(\n    title_text='Message Communication Within 3 Hours Before Sleep', \n    title_font_size=14,\n    title_x=0.5,  # Centers the title\n    font_size=10, \n    width=800, \n    height=600,\n    paper_bgcolor='white',\n    plot_bgcolor='white'\n)\nfig.show()\n```\n","srcMarkdownNoYaml":"\n\nWe cluster the smartphone use behaviors based on the three major metrics of smartphone use actions: Screen time, unlock frequency and message.\n\n## Descriptive Statistics\n\n```{python}\n#| echo: false\n#| warning: false\n#| output: true\nimport time;import pandas as pd;import numpy as np;import datetime\nfrom datetime import datetime;from datetime import timedelta;import sqlite3;import warnings\nimport matplotlib.pyplot as plt;import seaborn as sns;warnings.filterwarnings('ignore')\n\ndf=pd.read_csv(\"/Users/shaokangyang/Library/CloudStorage/OneDrive-Personal/Nethealth/Data/CNSA/combine/7/df7_3hr.csv\")\nimport plotly.graph_objs as go\n# Combine and format labels with their mean values for each category\n# Close Degree labels with their means\nlabels_close_degree = [\n    f'Especially Close: {df[\"especiallyclose_m\"].mean():.2f}',\n    f'Merely Close: {df[\"merelyclose_m\"].mean():.2f}',\n    f'Less Than Close: {df[\"lessthanclose_m\"].mean():.2f}',\n    f'Distant: {df[\"distant_m\"].mean():.2f}',\n    f'Close Unknown: {df[\"close_unknown_m\"].mean():.2f}'\n]\n\n# Message Type labels with their means\nlabels_message_type = [\n    f'SMS: {df[\"sms\"].mean():.2f}',\n    f'MMS: {df[\"mms\"].mean():.2f}',\n    f'WhatsApp: {df[\"whatsapp\"].mean():.2f}'\n]\n\n# Contact Type labels with their means\nlabels_contact_type = [\n    f'Acquaintance: {df[\"acquaintance_m\"].mean():.2f}',\n    f'Co-member Organization: {df[\"comemberorganization_m\"].mean():.2f}',\n    f'Coworker: {df[\"coworker_m\"].mean():.2f}',\n    f'Friend: {df[\"friend_m\"].mean():.2f}',\n    f'Neighbor: {df[\"neighbor_m\"].mean():.2f}',\n    f'Other Family: {df[\"otherfamily_m\"].mean():.2f}',\n    f'Romantic: {df[\"romantic_m\"].mean():.2f}',\n    f'Parent: {df[\"parent_m\"].mean():.2f}',\n    f'Step Parent: {df[\"stepparent_m\"].mean():.2f}',\n    f'Sibling: {df[\"sibling_m\"].mean():.2f}',\n    f'Step Sibling: {df[\"stepsibling_m\"].mean():.2f}',\n    f'Relation Unknown: {df[\"rela_unknown_m\"].mean():.2f}'\n]\n\n# Combine all labels for nodes\nlabels = labels_close_degree + labels_message_type + labels_contact_type\n\n# Initialize the lists for the source, target, and value arrays for the Sankey diagram\nsource = [\n    # Close Degree to Message Type\n    0, 0, 0,  # Especially Close to SMS, MMS, WhatsApp\n    1, 1, 1,  # Merely Close to SMS, MMS, WhatsApp\n    2, 2, 2,  # Less Than Close to SMS, MMS, WhatsApp\n    3, 3, 3,  # Distant to SMS, MMS, WhatsApp\n    4, 4, 4   # Close Unknown to SMS, MMS, WhatsApp\n] + [\n    # Message Type to Contact Type\n    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  # SMS to all contact types\n    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,  # MMS to all contact types\n    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7   # WhatsApp to all contact types\n]\n\ntarget = [\n    # Close Degree to Message Type\n    5, 6, 7,  # Especially Close to SMS, MMS, WhatsApp\n    5, 6, 7,  # Merely Close to SMS, MMS, WhatsApp\n    5, 6, 7,  # Less Than Close to SMS, MMS, WhatsApp\n    5, 6, 7,  # Distant to SMS, MMS, WhatsApp\n    5, 6, 7   # Close Unknown to SMS, MMS, WhatsApp\n] + [\n    # Message Type to Contact Type\n    8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,  # SMS to all contact types\n    8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,  # MMS to all contact types\n    8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19   # WhatsApp to all contact types\n]\n\n# Values for all connections (assuming you have these means calculated correctly in your DataFrame)\n#Judge if any of the following columns are not in the dataframe, create them and fill them with 0\nfor col in ['sms_acquaintance', 'sms_comemberorganization', 'sms_coworker', 'sms_friend', 'sms_neighbor', 'sms_otherfamily', 'sms_romanticpartner', 'sms_parent', 'sms_stepparent', 'sms_sibling', 'sms_stepsibling', 'sms_blank', 'mms_acquaintance', 'mms_comemberorganization', 'mms_coworker', 'mms_friend', 'mms_neighbor', 'mms_otherfamily', 'mms_romanticpartner', 'mms_parent', 'mms_stepparent', 'mms_sibling', 'mms_stepsibling', 'mms_blank', 'whatsapp_acquaintance', 'whatsapp_comemberorganization', 'whatsapp_coworker', 'whatsapp_friend', 'whatsapp_neighbor', 'whatsapp_otherfamily', 'whatsapp_romanticpartner', 'whatsapp_parent', 'whatsapp_stepparent', 'whatsapp_sibling', 'whatsapp_stepsibling', 'whatsapp_blank']:\n    if col not in df.columns:\n        df[col] = 0\nvalue = [\n    # Close Degree to Message Type values\n    df['sms_especiallyclose'].mean(), df['mms_especiallyclose'].mean(), df['whatsapp_especiallyclose'].mean(),\n    df['sms_merelyclose'].mean(), df['mms_merelyclose'].mean(), df['whatsapp_merelyclose'].mean(),\n    df['sms_lessthanclose'].mean(), df['mms_lessthanclose'].mean(), df['whatsapp_lessthanclose'].mean(),\n    df['sms_distant'].mean(), df['mms_distant'].mean(), df['whatsapp_distant'].mean(),\n    df['sms_blank'].mean(), df['mms_blank'].mean(), df['whatsapp_blank'].mean()\n] + [\n\n    df['sms_acquaintance'].mean(), df['sms_comemberorganization'].mean(), df['sms_coworker'].mean(), df['sms_friend'].mean(),\n    df['sms_neighbor'].mean(), df['sms_otherfamily'].mean(), df['sms_romanticpartner'].mean(), df['sms_parent'].mean(),\n    df['sms_stepparent'].mean(), df['sms_sibling'].mean(), df['sms_stepsibling'].mean(), df['sms_blank'].mean(),\n    df['mms_acquaintance'].mean(), df['mms_comemberorganization'].mean(), df['mms_coworker'].mean(), df['mms_friend'].mean(),\n    df['mms_neighbor'].mean(), df['mms_otherfamily'].mean(), df['mms_romanticpartner'].mean(), df['mms_parent'].mean(),\n    df['mms_stepparent'].mean(), df['mms_sibling'].mean(), df['mms_stepsibling'].mean(), df['mms_blank'].mean(),\n    df['whatsapp_acquaintance'].mean(), df['whatsapp_comemberorganization'].mean(),df['whatsapp_coworker'].mean(), df['whatsapp_friend'].mean(), df['whatsapp_neighbor'].mean(),\n    df['whatsapp_otherfamily'].mean(), df['whatsapp_romanticpartner'].mean(),\n    df['whatsapp_parent'].mean(), df['whatsapp_stepparent'].mean(), df['whatsapp_sibling'].mean(), df['whatsapp_stepsibling'].mean(),df['whatsapp_blank'].mean()\n]\n\n# Create and display the Sankey diagram\nfig = go.Figure(data=[go.Sankey(\n    node=dict(\n        pad=15,\n        thickness=20,\n        line=dict(color='black', width=0.5),\n        label=labels\n    ),\n    link=dict(\n        source=source,\n        target=target,\n        value=value\n    ))])\n\nfig.update_layout(\n    title_text='Message Communication Within 3 Hours Before Sleep', \n    title_font_size=14,\n    title_x=0.5,  # Centers the title\n    font_size=10, \n    width=800, \n    height=600,\n    paper_bgcolor='white',\n    plot_bgcolor='white'\n)\nfig.show()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":[5,30,125],"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","plugins":[{"search":{}},{"encryptcontent":{}}],"comments":{"utterances":{"repo":"Meeting"}},"theme":"cosmo","title":"Behavior Segmentation for Smartphone Use ","date":"03/10/2024","date-modified":"last-modified","date-format":"full","categories":["Paper1"],"image":"cluster1.png","page-layout":"full"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}